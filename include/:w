import depth_image_annotator
import os
import numpy as np
import cv2
import json
import argparse

def options():
    parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--data_dir', type=str,
            default='/home/monocle/Documents/FootSegDataset/exp/', help='The directory to process. This directory should not contain subdirectories')
    parser.add_argument('--save_image', type=bool, default=True, help='Save the PSO generated images')
    parser.add_argument('--color_ext', type=str, default='_color.png', help'suffix + extension of color images')
    parser.add_argument('--depth_ext', type=str, default='_depth.exr', help'suffix + extension of depth images')
    parser.add_argument('--json_ext', type=str, default='_color.json', help'suffix + extension of json files that contain mask labels')
    parser.add_argument('--ppx', type=float, default=644.489, help'RealSense intrinsics ppx value at time of caputre')

    return parser.parse_args()

def json2mask(json_path, label, mask_height=256, mask_width=256):
    img = np.zeros((mask_height, mask_width))
    with open(json_path) as f:
        data = json.load(f)
        shapes = []
        for shape in data["shapes"]:
            if shape["label"]==label:
                shapes.append(shape["points"])
        for shape in shapes:
            polygon = np.array(shape)
            cv2.fillPoly(img, [polygon], 1)
    if len(shapes) == 0:
        return None

    return Image.fromarray(img)


if __name__ == '__main__':
    opt = options()

    # depth image annotator
    dia = depth_image_annotator.DepthImageAnnotator()
    # intrinsics = depth_image_annotator.Intrinsics(ppx=635.246, ppy=374.675, fx=923.48, fy=924.343, left=0.0, right=1280.0, bottom=720.0, top=0.0, zNear=0.1, zFar=3.0)
    # bbox = depth_image_annotator.Box(x=12, y=0, width=533)
    # params = dia.FindSolution(is_left=False, file_name='/home/eric/Dev/DepthImageAnnotator/res/depth_image.exr', bbox=bbox, intrinsics=intrinsics, iterations=100, initial_samples=100, iterated_samples=5)
    # dia.WriteImage(location="/home/eric/Dev/DepthImageAnnotator/res/out_depth_image.exr", params=params, is_left=True, intrinsics=intrinsics)

    for _, _, filenames in os.walk(opt.data_dir):
        fnames = [f for f in filenames if opt.depth_ext in f]
        for f in sorted(fnames):
            dpath = os.path.join(opt.data_dir, f)
            jpath = os.path.join(opt.data_dir, f.replace(opt.depth_ext, opt.json_ext))
